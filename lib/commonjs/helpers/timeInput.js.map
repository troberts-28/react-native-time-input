{"version":3,"sources":["timeInput.ts"],"names":["mask","value","replace","totalCharactersInValue","length","substr","validate","maxHours","maxMinutes","maxSeconds","includeSeconds","hideHours","rule","slice","regex","RegExp","test"],"mappings":";;;;;;;AAAO,MAAMA,IAAI,GAAIC,KAAD,IAA2B;AAC7C;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACC,OAAN,CAAc,aAAd,EAA6B,EAA7B,CAAR;AAEA,MAAIC,sBAAsB,GAAGF,KAAK,CAACG,MAAnC;;AAEA,MAAID,sBAAsB,KAAK,CAA/B,EAAkC;AAChC,WAAOF,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgB,CAAhB,IAAqB,GAArB,GAA2BJ,KAAK,CAACI,MAAN,CAAa,CAAb,CAAlC;AACD;;AAED,MAAIF,sBAAsB,KAAK,CAA/B,EAAkC;AAChC,WAAOF,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgB,CAAhB,IAAqB,GAArB,GAA2BJ,KAAK,CAACI,MAAN,CAAa,CAAb,CAAlC;AACD;;AAED,MAAIF,sBAAsB,KAAK,CAA/B,EAAkC;AAChC,WACEF,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgB,CAAhB,IAAqB,GAArB,GAA2BJ,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAA3B,GAAgD,GAAhD,GAAsDJ,KAAK,CAACI,MAAN,CAAa,CAAb,CADxD;AAGD;;AAED,MAAIF,sBAAsB,KAAK,CAA/B,EAAkC;AAChC,WACEF,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgB,CAAhB,IAAqB,GAArB,GAA2BJ,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAA3B,GAAgD,GAAhD,GAAsDJ,KAAK,CAACI,MAAN,CAAa,CAAb,CADxD;AAGD;;AAED,SAAOJ,KAAP;AACD,CA3BM;;;;AA6BA,MAAMK,QAAQ,GAAG,CACtBL,KADsB,EAEtBM,QAFsB,EAGtBC,UAHsB,EAItBC,UAJsB,EAKtBC,cALsB,EAMtBC,SANsB,KAOV;AAAA;;AACZ,MAAIC,IAAI,GAAI,MAAD,qBAAMJ,UAAN,aAAMA,UAAN,uBAAMA,UAAU,CAAEK,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAAN,iEAAkC,GAAI,OAAtC,sBACTL,UADS,aACTA,UADS,uBACTA,UAAU,CAAEK,KAAZ,CAAkB,CAAC,CAAnB,CADS,mEACgB,GAC1B,GAFD;;AAIA,MAAI,CAACF,SAAL,EAAgB;AAAA;;AACdC,IAAAA,IAAI,GACD,UAAD,mBAAUL,QAAV,aAAUA,QAAV,uBAAUA,QAAQ,CAAEM,KAAV,CAAgB,CAAC,CAAjB,CAAV,6DAAiC,GAAI,KAArC,QACE,SAAQN,QAAR,aAAQA,QAAR,uBAAQA,QAAQ,CAAEM,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAR,IAAiC,GADnC,uCAC0C,GACzC,MAFD,oBAEMN,QAFN,aAEMA,QAFN,uBAEMA,QAAQ,CAAEM,KAAV,CAAgB,CAAC,CAAjB,CAFN,+DAE6B,GAAI,KAFjC,GAEwCD,IAH1C;AAID;;AAED,MAAIF,cAAJ,EAAoB;AAAA;;AAClBE,IAAAA,IAAI,IAAK,OAAD,qBAAOH,UAAP,aAAOA,UAAP,uBAAOA,UAAU,CAAEI,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAAP,iEAAmC,GAAI,OAAvC,sBACNJ,UADM,aACNA,UADM,uBACNA,UAAU,CAAEI,KAAZ,CAAkB,CAAC,CAAnB,CADM,mEACmB,GAC1B,IAFD;AAGD;;AAED,QAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAWH,IAAX,CAAd,CAlBY,CAoBZ;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOX,KAAK,CAACG,MAAN,GAAeU,KAAK,CAACE,IAAN,CAAWf,KAAX,CAAf,GAAmC,IAA1C;AACD,CAnCM","sourcesContent":["export const mask = (value: string): string => {\n  // replace non-numeric characters\n  value = value.replace(/:|[a-zA-Z]/g, '');\n\n  let totalCharactersInValue = value.length;\n\n  if (totalCharactersInValue === 3) {\n    return value.substr(0, 1) + ':' + value.substr(1);\n  }\n\n  if (totalCharactersInValue === 4) {\n    return value.substr(0, 2) + ':' + value.substr(2);\n  }\n\n  if (totalCharactersInValue === 5) {\n    return (\n      value.substr(0, 2) + ':' + value.substr(2, 3) + ':' + value.substr(3)\n    );\n  }\n\n  if (totalCharactersInValue === 6) {\n    return (\n      value.substr(0, 2) + ':' + value.substr(2, 4) + ':' + value.substr(4)\n    );\n  }\n\n  return value;\n};\n\nexport const validate = (\n  value: string,\n  maxHours?: string,\n  maxMinutes?: string,\n  maxSeconds?: string,\n  includeSeconds?: boolean,\n  hideHours?: boolean\n): boolean => {\n  let rule = `[0-${maxMinutes?.slice(0, -1) ?? '5'}][0-${\n    maxMinutes?.slice(-1) ?? '9'\n  }]`;\n\n  if (!hideHours) {\n    rule =\n      `^(0?[0-${maxHours?.slice(-1) ?? '9'}]|${\n        '[0-' + maxHours?.slice(0, -1) + ']' ?? '1'\n      }[0-${maxHours?.slice(-1) ?? '2'}]):` + rule;\n  }\n\n  if (includeSeconds) {\n    rule += `:[0-${maxSeconds?.slice(0, -1) ?? '5'}][0-${\n      maxSeconds?.slice(-1) ?? '9'\n    }]$`;\n  }\n\n  const regex = new RegExp(rule);\n\n  // regex = new RegExp(\n  //   `^(0?[0-${maxHours?.slice(-1) ?? '9'}]|${\n  //     '[0-' + maxHours?.slice(0, -1) + ']' ?? '1'\n  //   }[0-${maxHours?.slice(-1) ?? '2'}]):[0-${\n  //     maxMinutes?.slice(0, -1) ?? '5'\n  //   }][0-${maxMinutes?.slice(-1) ?? '9'}]$`\n  // );\n  return value.length ? regex.test(value) : true;\n};\n"]}