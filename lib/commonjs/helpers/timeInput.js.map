{"version":3,"sources":["timeInput.ts"],"names":["mask","value","replace","totalCharactersInValue","length","substr","validate","maxHours","maxSeconds","regex","RegExp","slice","test"],"mappings":";;;;;;;AAAO,MAAMA,IAAI,GAAIC,KAAD,IAA2B;AAC7C;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACC,OAAN,CAAc,aAAd,EAA6B,EAA7B,CAAR;AAEA,MAAIC,sBAAsB,GAAGF,KAAK,CAACG,MAAnC;;AAEA,MAAID,sBAAsB,KAAK,CAA/B,EAAkC;AAChC,WAAOF,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgB,CAAhB,IAAqB,GAArB,GAA2BJ,KAAK,CAACI,MAAN,CAAa,CAAb,CAAlC;AACD;;AAED,MAAIF,sBAAsB,KAAK,CAA/B,EAAkC;AAChC,WAAOF,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgB,CAAhB,IAAqB,GAArB,GAA2BJ,KAAK,CAACI,MAAN,CAAa,CAAb,CAAlC;AACD;;AAED,SAAOJ,KAAP;AACD,CAfM;;;;AAiBA,MAAMK,QAAQ,GAAG,CACtBL,KADsB,EAEtBM,QAFsB,EAGtBC,UAHsB,KAIV;AACZ,MAAIC,KAAK,GAAG,IAAIC,MAAJ,CACT,UAASH,QAAQ,CAACI,KAAT,CAAe,CAAC,CAAhB,CAAmB,KAAIJ,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAsB,MAAKJ,QAAQ,CAACI,KAAT,CAC1D,CAAC,CADyD,CAE1D,SAAQH,UAAU,CAACG,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAwB,OAAMH,UAAU,CAACG,KAAX,CAAiB,CAAC,CAAlB,CAAqB,IAHnD,CAAZ;AAKA,SAAOV,KAAK,CAACG,MAAN,GAAeK,KAAK,CAACG,IAAN,CAAWX,KAAX,CAAf,GAAmC,IAA1C;AACD,CAXM","sourcesContent":["export const mask = (value: string): string => {\n  // replace non-numeric characters\n  value = value.replace(/:|[a-zA-Z]/g, '');\n\n  let totalCharactersInValue = value.length;\n\n  if (totalCharactersInValue === 3) {\n    return value.substr(0, 1) + ':' + value.substr(1);\n  }\n\n  if (totalCharactersInValue === 4) {\n    return value.substr(0, 2) + ':' + value.substr(2);\n  }\n\n  return value;\n};\n\nexport const validate = (\n  value: string,\n  maxHours: string,\n  maxSeconds: string\n): boolean => {\n  let regex = new RegExp(\n    `^(0?[1-${maxHours.slice(-1)}]|${maxHours.slice(0, -1)}[0-${maxHours.slice(\n      -1\n    )}]):[0-${maxSeconds.slice(0, -1)}][0-${maxSeconds.slice(-1)}]$`\n  );\n  return value.length ? regex.test(value) : true;\n};\n"]}