{"version":3,"sources":["index.tsx"],"names":["TimeInput","id","errorText","showErrorText","initialTime","onTimeChange","onFinishEditing","setCurrentTime","hideToggle","includeSeconds","hideHours","isDisabled","maxHours","maxMinutes","maxSeconds","placeholderTime","floatingErrorMessage","floatingErrorOffset","styles","defaultStyles","theme","defaultTheme","initialRender","animation","Animated","Value","current","componentReady","setComponentReady","componentTheme","setComponentTheme","componentStyle","setComponentStyle","componentErrorText","setComponentErrorText","currentLocaleTime","currentLocaleTimeParsed","initialTimeParsed","getGivenTime","meridiem","setMeridiem","gt","time","setTime","validTime","setValidTime","handleTimeValueReady","isValid","updated","handleMeridiemChange","timing","toValue","delay","duration","useNativeDriver","start","StyleSheet","create","_","merge","assign","stopAnimation","length","componentContainer","container","placeholderTextColor","focusBorderColor","inputBorderColor","inputBackgroundColor","inputInvalidBorderColor","selectionColor","input","backgroundColor","borderColor","borderWidth","inputBorderWidth","color","inputTextColor","fontFamily","inputFontFamily","fontSize","inputFontSize","toggle","toggleBackgroundColor","toggleButton","toggleButtonBackground","toggleButtonTextColor","toggleButtonActive","toggleButtonActiveBackgroundColor","transform","translateX","toggleButtonActiveTextColor","errorTextContainer","errorTextColor","paddingLeft","errorTextPaddingLeft"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Animated, StyleSheet, Text, View } from 'react-native';\nimport TimeTextField from './components/TimeTextField';\nimport _ from 'lodash';\nimport Toggle, { ToggleButton } from './components/Toggle';\nimport defaultStyles from './utils/style';\nimport defaultTheme from './utils/theme';\nimport getLocaleTimeString from './helpers/getLocaleTimeString';\nimport parseLocaleTimeString from './helpers/parseLocaleTimeString';\nimport type TimeInputProps from './typing/TimeInputProps';\nimport type TimeInputStyle from './typing/TimeInputStyle';\nimport type TimeInputTheme from './typing/TimeInputTheme';\nimport type { TimeParts } from './typing/TimeParts';\n\nexport default function TimeInput({\n  id,\n  errorText = null,\n  showErrorText = true,\n  initialTime = null,\n  onTimeChange = () => {},\n  onFinishEditing,\n  setCurrentTime = false,\n  hideToggle = false,\n  includeSeconds = false,\n  hideHours = false,\n  isDisabled = false,\n  maxHours,\n  maxMinutes,\n  maxSeconds,\n  placeholderTime,\n  floatingErrorMessage,\n  floatingErrorOffset,\n  styles = defaultStyles,\n  theme = defaultTheme,\n}: TimeInputProps): JSX.Element | null {\n  const initialRender = useRef(true);\n  const animation = useRef(new Animated.Value(0)).current;\n  const [componentReady, setComponentReady] = useState<boolean>(false);\n  const [componentTheme, setComponentTheme] = useState<TimeInputTheme | null>(\n    null\n  );\n  const [componentStyle, setComponentStyle] = useState<TimeInputStyle | null>(\n    null\n  );\n  const [componentErrorText, setComponentErrorText] = useState<string>(\n    'Please enter a valid time.'\n  );\n  const [currentLocaleTime] = useState<string>(\n    getLocaleTimeString(null, hideHours, includeSeconds)\n  );\n  const [currentLocaleTimeParsed] = useState<TimeParts>(\n    parseLocaleTimeString(currentLocaleTime)\n  );\n  const [initialTimeParsed] = useState<TimeParts | null>((): TimeParts | null =>\n    !initialTime\n      ? null\n      : parseLocaleTimeString(\n          getLocaleTimeString(initialTime, hideHours, includeSeconds)\n        )\n  );\n\n  const getGivenTime = (): TimeParts | null => {\n    if (initialTime && initialTimeParsed) return initialTimeParsed;\n    return setCurrentTime ? currentLocaleTimeParsed : null;\n  };\n\n  const [meridiem, setMeridiem] = useState<string>(() => {\n    let gt = getGivenTime();\n    return !gt ? currentLocaleTimeParsed.meridiem : gt.meridiem;\n  });\n  const [time, setTime] = useState<string>('');\n  const [validTime, setValidTime] = useState<boolean>(true);\n\n  const handleTimeValueReady = (isValid: boolean, updated: string): void => {\n    setTime(updated);\n    setValidTime(isValid);\n  };\n\n  const handleMeridiemChange = useCallback(() => {\n    Animated.timing(animation, {\n      toValue: meridiem === 'PM' ? 40 : 0,\n      delay: 0,\n      duration: 225,\n      useNativeDriver: true,\n    }).start();\n  }, [animation, meridiem]);\n\n  // Init component after setting the theme and styles\n  useEffect((): void => {\n    if (!componentStyle || !componentTheme) return;\n    setComponentReady(true);\n  }, [componentStyle, componentTheme, setComponentReady]);\n\n  useEffect((): void => {\n    setComponentStyle(StyleSheet.create(_.merge({}, defaultStyles, styles)));\n    setComponentTheme(_.assign({}, defaultTheme, theme));\n  }, [styles, theme, setComponentStyle, setComponentTheme]);\n\n  useEffect(() => {\n    if (!errorText) return;\n    setComponentErrorText(errorText);\n  }, [errorText, setComponentErrorText]);\n\n  useEffect(() => {\n    handleMeridiemChange();\n    return () => animation.stopAnimation();\n  }, [meridiem, animation, handleMeridiemChange]);\n\n  useEffect(() => {\n    if (initialRender.current) {\n      initialRender.current = false;\n      return;\n    }\n\n    time.length\n      ? onTimeChange(`${time} ${meridiem}`, validTime)\n      : onTimeChange('', validTime);\n  }, [time, meridiem, validTime, onTimeChange]);\n\n  if (!componentReady || !componentStyle || !componentTheme) return null;\n\n  return (\n    <View style={componentStyle.componentContainer}>\n      <View style={componentStyle.container}>\n        <TimeTextField\n          id={id}\n          givenTime={getGivenTime()}\n          onFinishEditing={onFinishEditing}\n          maxHours={maxHours}\n          maxMinutes={maxMinutes}\n          maxSeconds={maxSeconds}\n          isDisabled={isDisabled}\n          includeSeconds={includeSeconds}\n          hideHours={hideHours}\n          placeholderTime={placeholderTime}\n          placeholderColor={\n            !isDisabled ? componentTheme.placeholderTextColor : 'transparent'\n          }\n          focusBorderColor={componentTheme.focusBorderColor}\n          floatingErrorMessage={floatingErrorMessage}\n          floatingErrorOffset={floatingErrorOffset}\n          unfocusBorderColor={componentTheme.inputBorderColor}\n          bg={componentTheme.inputBackgroundColor}\n          invalidBorderColor={componentTheme.inputInvalidBorderColor}\n          selectionColor={componentTheme.selectionColor}\n          style={[\n            componentStyle.input ?? {},\n            {\n              backgroundColor: componentTheme.inputBackgroundColor,\n              borderColor: componentTheme.inputBorderColor,\n              borderWidth: componentTheme.inputBorderWidth,\n              color: !isDisabled\n                ? componentTheme.inputTextColor\n                : 'transparent',\n              fontFamily: componentTheme.inputFontFamily,\n              fontSize: componentTheme.inputFontSize,\n            },\n          ]}\n          onTimeValueReady={handleTimeValueReady}\n        />\n\n        {!hideToggle && (\n          <Toggle\n            toggleStyles={[\n              componentStyle.toggle ?? {},\n              {\n                backgroundColor: componentTheme.toggleBackgroundColor,\n              },\n            ]}\n          >\n            <ToggleButton\n              toggleButtonStyles={[\n                componentStyle.toggleButton ?? {},\n                {\n                  backgroundColor: componentTheme.toggleButtonBackground,\n                },\n              ]}\n              onPress={() => setMeridiem('AM')}\n            >\n              <Text\n                style={{\n                  color: componentTheme.toggleButtonTextColor,\n                }}\n              >\n                AM\n              </Text>\n            </ToggleButton>\n\n            <ToggleButton\n              toggleButtonStyles={[\n                componentStyle.toggleButton ?? {},\n                {\n                  backgroundColor: componentTheme.toggleButtonBackground,\n                },\n              ]}\n              onPress={() => setMeridiem('PM')}\n            >\n              <Text\n                style={{\n                  color: componentTheme.toggleButtonTextColor,\n                }}\n              >\n                PM\n              </Text>\n            </ToggleButton>\n\n            <ToggleButton\n              activeButton\n              toggleButtonStyles={[\n                componentStyle.toggleButton ?? {},\n                componentStyle.toggleButtonActive ?? {},\n                {\n                  backgroundColor:\n                    componentTheme.toggleButtonActiveBackgroundColor,\n                  transform: [{ translateX: animation }],\n                },\n              ]}\n            >\n              <Text\n                style={{\n                  color: componentTheme.toggleButtonActiveTextColor,\n                }}\n              >\n                {meridiem}\n              </Text>\n            </ToggleButton>\n          </Toggle>\n        )}\n      </View>\n\n      {showErrorText && !validTime ? (\n        <View style={componentStyle.errorTextContainer}>\n          <Text\n            style={[\n              componentStyle.errorText,\n              {\n                color: componentTheme.errorTextColor,\n                paddingLeft: componentTheme.errorTextPaddingLeft,\n                fontFamily: componentTheme.inputFontFamily,\n              },\n            ]}\n          >\n            {validTime ? '' : componentErrorText}\n          </Text>\n        </View>\n      ) : (\n        <></>\n      )}\n    </View>\n  );\n}\n"]}