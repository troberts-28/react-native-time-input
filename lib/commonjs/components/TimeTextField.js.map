{"version":3,"sources":["TimeTextField.tsx"],"names":["TimeTextField","givenTime","onTimeValueReady","style","placeholderTime","time","setTime","state","debouncedTime","setDebouncedState","setDebouncedTime","debounce","TimeInputHelper","validate","cancel","text","mask"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;AASe,SAASA,aAAT,CAAuB;AACpCC,EAAAA,SADoC;AAEpCC,EAAAA,gBAFoC;AAGpCC,EAAAA,KAHoC;AAIpCC,EAAAA;AAJoC,CAAvB,EAKqB;AAClC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB,qBAAiB,EAAjB,CAAxB;AACA,QAAM;AACJC,IAAAA,KAAK,EAAEC,aADH;AAEJC,IAAAA,iBAAiB,EAAEC,gBAFf;AAGJC,IAAAA;AAHI,MAIF,0BAAYN,IAAZ,EAAkB,GAAlB,CAJJ;AAMA,wBAAU,MAAM;AACd,QAAI,CAACJ,SAAL,EAAgB;AAChBK,IAAAA,OAAO,CAACL,SAAS,CAACI,IAAX,CAAP;AACD,GAHD,EAGG,CAACJ,SAAD,EAAYK,OAAZ,CAHH;AAKA,wBAAU,MAAY;AACpBJ,IAAAA,gBAAgB,CACdU,eAAe,CAACC,QAAhB,CAAyBL,aAAzB,EAAwC,IAAxC,EAA8C,IAA9C,CADc,EAEdA,aAFc,CAAhB;AAID,GALD,EAKG,CAACA,aAAD,EAAgBN,gBAAhB,CALH;AAOA,wBAAU,MAAoB;AAC5BQ,IAAAA,gBAAgB,CAACL,IAAD,CAAhB;AAEA,WAAO,MAAM;AACXM,MAAAA,QAAQ,CAACG,MAAT;AACD,KAFD;AAGD,GAND,EAMG,CAACH,QAAD,EAAWN,IAAX,EAAiBK,gBAAjB,CANH;AAQA,sBACE,6BAAC,sBAAD;AACE,IAAA,YAAY,EAAC,YADf;AAEE,IAAA,SAAS,EAAE,CAFb;AAGE,IAAA,YAAY,EAAGK,IAAD,IAAkBT,OAAO,CAACM,eAAe,CAACI,IAAhB,CAAqBD,IAArB,CAAD,CAHzC;AAIE,IAAA,WAAW,EAAEX,eAAF,aAAEA,eAAF,cAAEA,eAAF,GAAqB,OAJlC;AAKE,IAAA,KAAK,EAAEC,IALT;AAME,IAAA,KAAK,EAAEF;AANT,IADF;AAUD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TextInput, TextStyle } from 'react-native';\nimport * as TimeInputHelper from '../helpers/timeInput';\nimport type { TimeParts } from 'src/typing/TimeParts';\nimport useDebounce from '../hooks/useDebounce';\n\ntype TimeTextFieldProps = {\n  style: TextStyle[];\n  onTimeValueReady: Function;\n  givenTime: TimeParts | null;\n  placeholderTime?: string;\n};\n\nexport default function TimeTextField({\n  givenTime,\n  onTimeValueReady,\n  style,\n  placeholderTime,\n}: TimeTextFieldProps): JSX.Element {\n  const [time, setTime] = useState<string>('');\n  const {\n    state: debouncedTime,\n    setDebouncedState: setDebouncedTime,\n    debounce,\n  } = useDebounce(time, 250);\n\n  useEffect(() => {\n    if (!givenTime) return;\n    setTime(givenTime.time);\n  }, [givenTime, setTime]);\n\n  useEffect((): void => {\n    onTimeValueReady(\n      TimeInputHelper.validate(debouncedTime, '99', '99'),\n      debouncedTime\n    );\n  }, [debouncedTime, onTimeValueReady]);\n\n  useEffect((): (() => void) => {\n    setDebouncedTime(time);\n\n    return () => {\n      debounce.cancel();\n    };\n  }, [debounce, time, setDebouncedTime]);\n\n  return (\n    <TextInput\n      keyboardType=\"number-pad\"\n      maxLength={5}\n      onChangeText={(text: string) => setTime(TimeInputHelper.mask(text))}\n      placeholder={placeholderTime ?? '08:00'}\n      value={time}\n      style={style}\n    />\n  );\n}\n"]}