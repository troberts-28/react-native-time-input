{"version":3,"sources":["TimeTextField.tsx"],"names":["React","useEffect","useState","useCallback","TextInput","Tooltip","TimeInputHelper","useDebounce","TimeTextField","id","givenTime","onTimeValueReady","includeSeconds","hideHours","style","placeholderTime","placeholderColor","focusBorderColor","unfocusBorderColor","invalidBorderColor","floatingErrorMessage","floatingErrorOffset","isDisabled","maxHours","maxMinutes","maxSeconds","onFinishEditing","bg","time","setTime","isFocussed","setIsFocussed","isValid","setIsValid","state","debouncedTime","setDebouncedState","setDebouncedTime","debounce","valid","validate","cancel","focusHandler","lostFocusHandler","color","text","mask","borderColor","borderWidth","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { TextInput, TextStyle } from 'react-native';\nimport { Tooltip } from 'native-base';\nimport * as TimeInputHelper from '../helpers/timeInput';\nimport type { TimeParts } from 'src/typing/TimeParts';\nimport useDebounce from '../hooks/useDebounce';\n\ntype TimeTextFieldProps = {\n  id?: string;\n  style: TextStyle[];\n  onTimeValueReady: Function;\n  includeSeconds: boolean;\n  hideHours?: boolean;\n  givenTime: TimeParts | null;\n  placeholderTime?: string;\n  placeholderColor?: string;\n  focusBorderColor?: string;\n  unfocusBorderColor?: string;\n  invalidBorderColor?: string;\n  floatingErrorOffset?: number;\n  floatingErrorMessage?: string;\n  isDisabled?: boolean;\n  maxHours?: string;\n  maxMinutes?: string;\n  maxSeconds?: string;\n  onFinishEditing?: Function;\n  bg?: string;\n};\n\nexport default function TimeTextField({\n  id,\n  givenTime,\n  onTimeValueReady,\n  includeSeconds,\n  hideHours,\n  style,\n  placeholderTime,\n  placeholderColor,\n  focusBorderColor,\n  unfocusBorderColor,\n  invalidBorderColor,\n  floatingErrorMessage,\n  floatingErrorOffset,\n  isDisabled,\n  maxHours,\n  maxMinutes,\n  maxSeconds,\n  onFinishEditing,\n  bg,\n}: TimeTextFieldProps): JSX.Element {\n  const [time, setTime] = useState<string>('');\n  const [isFocussed, setIsFocussed] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n\n  const {\n    state: debouncedTime,\n    setDebouncedState: setDebouncedTime,\n    debounce,\n  } = useDebounce(time, 250);\n\n  useEffect(() => {\n    if (!givenTime) return;\n    setTime(givenTime.time);\n  }, [givenTime, setTime]);\n\n  useEffect((): void => {\n    const valid = TimeInputHelper.validate(\n      debouncedTime,\n      maxHours,\n      maxMinutes,\n      maxSeconds,\n      includeSeconds,\n      hideHours\n    );\n    setIsValid(valid);\n    onTimeValueReady(valid, debouncedTime);\n  }, [\n    debouncedTime,\n    hideHours,\n    includeSeconds,\n    maxHours,\n    maxMinutes,\n    maxSeconds,\n    onTimeValueReady,\n  ]);\n\n  useEffect((): (() => void) => {\n    setDebouncedTime(time);\n\n    return () => {\n      debounce.cancel();\n    };\n  }, [debounce, time, setDebouncedTime]);\n\n  const focusHandler = useCallback(() => {\n    setIsFocussed(true);\n  }, []);\n\n  const lostFocusHandler = useCallback(() => {\n    setIsFocussed(false);\n    if (onFinishEditing) {\n      onFinishEditing(id ?? 'dummyId', time, isValid);\n    }\n  }, [id, isValid, onFinishEditing, time]);\n\n  return (\n    <Tooltip\n      label={floatingErrorMessage ?? ''}\n      isOpen={floatingErrorMessage ? !isValid && isFocussed : false}\n      placement=\"bottom\"\n      mt={floatingErrorOffset ?? 16} // * hacky value inserted to push it below - should link to size of input\n      py=\"0.5\"\n      px=\"1\"\n      bg=\"#BDBDBD\"\n      _text={{ color: '#78716c' }}\n      openDelay={400}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <TextInput\n        keyboardType=\"number-pad\"\n        maxLength={includeSeconds ? (!hideHours ? 8 : 5) : 5}\n        onChangeText={(text: string) => setTime(TimeInputHelper.mask(text))}\n        onBlur={lostFocusHandler}\n        onFocus={focusHandler}\n        editable={!isDisabled ?? true}\n        selectTextOnFocus={!isDisabled ?? true}\n        placeholder={placeholderTime ?? '08:00'}\n        placeholderTextColor={placeholderColor}\n        value={time}\n        selectionColor={focusBorderColor}\n        style={[\n          style,\n          {\n            borderColor: !isValid\n              ? invalidBorderColor\n              : isFocussed\n              ? focusBorderColor\n              : unfocusBorderColor,\n            borderWidth: isDisabled ? 0 : 1,\n            backgroundColor: isDisabled ? 'transparent' : bg,\n          },\n        ]}\n      />\n    </Tooltip>\n  );\n}\n"]}