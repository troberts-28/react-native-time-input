{"version":3,"sources":["TimeTextField.tsx"],"names":["React","useEffect","useState","useCallback","TextInput","Tooltip","TimeInputHelper","useDebounce","TimeTextField","givenTime","onTimeValueReady","style","placeholderTime","placeholderColor","focusBorderColor","floatingErrorMessage","maxHours","maxMinutes","onFinishEditing","time","setTime","isFocussed","setIsFocussed","isValid","setIsValid","state","debouncedTime","setDebouncedState","setDebouncedTime","debounce","valid","validate","cancel","focusHandler","lostFocusHandler","color","text","mask","borderColor","undefined"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { TextInput, TextStyle } from 'react-native';\nimport { Tooltip } from 'native-base';\nimport * as TimeInputHelper from '../helpers/timeInput';\nimport type { TimeParts } from 'src/typing/TimeParts';\nimport useDebounce from '../hooks/useDebounce';\n\ntype TimeTextFieldProps = {\n  style: TextStyle[];\n  onTimeValueReady: Function;\n  givenTime: TimeParts | null;\n  placeholderTime?: string;\n  placeholderColor?: string;\n  focusBorderColor?: string;\n  floatingErrorMessage?: string;\n  invalidIndicator?: boolean;\n  maxHours?: string;\n  maxMinutes?: string;\n  onFinishEditing?: Function;\n};\n\nexport default function TimeTextField({\n  givenTime,\n  onTimeValueReady,\n  style,\n  placeholderTime,\n  placeholderColor,\n  focusBorderColor,\n  floatingErrorMessage,\n  maxHours,\n  maxMinutes,\n  onFinishEditing,\n}: TimeTextFieldProps): JSX.Element {\n  const [time, setTime] = useState<string>('');\n  const [isFocussed, setIsFocussed] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n\n  const {\n    state: debouncedTime,\n    setDebouncedState: setDebouncedTime,\n    debounce,\n  } = useDebounce(time, 250);\n\n  useEffect(() => {\n    if (!givenTime) return;\n    setTime(givenTime.time);\n  }, [givenTime, setTime]);\n\n  useEffect((): void => {\n    const valid = TimeInputHelper.validate(debouncedTime, maxHours, maxMinutes);\n    setIsValid(valid);\n    onTimeValueReady(valid, debouncedTime);\n  }, [debouncedTime, maxHours, maxMinutes, onTimeValueReady]);\n\n  useEffect((): (() => void) => {\n    setDebouncedTime(time);\n\n    return () => {\n      debounce.cancel();\n    };\n  }, [debounce, time, setDebouncedTime]);\n\n  const focusHandler = useCallback(() => {\n    setIsFocussed(true);\n  }, []);\n\n  const lostFocusHandler = useCallback(() => {\n    setIsFocussed(false);\n    if (onFinishEditing) {\n      onFinishEditing(time);\n    }\n  }, [onFinishEditing, time]);\n\n  return (\n    <Tooltip\n      label={floatingErrorMessage ?? ''}\n      isOpen={floatingErrorMessage ? isValid && isFocussed : false}\n      placement=\"bottom\"\n      mt=\"16\" // * hacky value inserted to push it below - should link to size of input\n      py=\"0.5\"\n      px=\"1\"\n      bg=\"#BDBDBD\"\n      _text={{ color: '#78716c' }}\n    >\n      <TextInput\n        keyboardType=\"number-pad\"\n        maxLength={5}\n        onChangeText={(text: string) => setTime(TimeInputHelper.mask(text))}\n        onBlur={lostFocusHandler}\n        onFocus={focusHandler}\n        placeholder={placeholderTime ?? '08:00'}\n        placeholderTextColor={placeholderColor}\n        value={time}\n        style={[\n          style,\n          { borderColor: isFocussed ? focusBorderColor : undefined },\n        ]}\n      />\n    </Tooltip>\n  );\n}\n"]}