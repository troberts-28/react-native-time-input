{"version":3,"sources":["TimeTextField.tsx"],"names":["React","useEffect","useState","TextInput","TimeInputHelper","useDebounce","TimeTextField","givenTime","onTimeValueReady","style","placeholderTime","maxHours","maxMinutes","time","setTime","state","debouncedTime","setDebouncedState","setDebouncedTime","debounce","validate","cancel","text","mask"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAAqC,cAArC;AACA,OAAO,KAAKC,eAAZ,MAAiC,sBAAjC;AAEA,OAAOC,WAAP,MAAwB,sBAAxB;AAWA,eAAe,SAASC,aAAT,CAAuB;AACpCC,EAAAA,SADoC;AAEpCC,EAAAA,gBAFoC;AAGpCC,EAAAA,KAHoC;AAIpCC,EAAAA,eAJoC;AAKpCC,EAAAA,QALoC;AAMpCC,EAAAA;AANoC,CAAvB,EAOqB;AAClC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAS,EAAT,CAAhC;AACA,QAAM;AACJa,IAAAA,KAAK,EAAEC,aADH;AAEJC,IAAAA,iBAAiB,EAAEC,gBAFf;AAGJC,IAAAA;AAHI,MAIFd,WAAW,CAACQ,IAAD,EAAO,GAAP,CAJf;AAMAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,SAAL,EAAgB;AAChBO,IAAAA,OAAO,CAACP,SAAS,CAACM,IAAX,CAAP;AACD,GAHQ,EAGN,CAACN,SAAD,EAAYO,OAAZ,CAHM,CAAT;AAKAb,EAAAA,SAAS,CAAC,MAAY;AACpBO,IAAAA,gBAAgB,CACdJ,eAAe,CAACgB,QAAhB,CAAyBJ,aAAzB,EAAwCL,QAAxC,EAAkDC,UAAlD,CADc,EAEdI,aAFc,CAAhB;AAID,GALQ,EAKN,CAACA,aAAD,EAAgBL,QAAhB,EAA0BC,UAA1B,EAAsCJ,gBAAtC,CALM,CAAT;AAOAP,EAAAA,SAAS,CAAC,MAAoB;AAC5BiB,IAAAA,gBAAgB,CAACL,IAAD,CAAhB;AAEA,WAAO,MAAM;AACXM,MAAAA,QAAQ,CAACE,MAAT;AACD,KAFD;AAGD,GANQ,EAMN,CAACF,QAAD,EAAWN,IAAX,EAAiBK,gBAAjB,CANM,CAAT;AAQA,sBACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAC,YADf;AAEE,IAAA,SAAS,EAAE,CAFb;AAGE,IAAA,YAAY,EAAGI,IAAD,IAAkBR,OAAO,CAACV,eAAe,CAACmB,IAAhB,CAAqBD,IAArB,CAAD,CAHzC;AAIE,IAAA,WAAW,EAAEZ,eAAF,aAAEA,eAAF,cAAEA,eAAF,GAAqB,OAJlC;AAKE,IAAA,KAAK,EAAEG,IALT;AAME,IAAA,KAAK,EAAEJ;AANT,IADF;AAUD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TextInput, TextStyle } from 'react-native';\nimport * as TimeInputHelper from '../helpers/timeInput';\nimport type { TimeParts } from 'src/typing/TimeParts';\nimport useDebounce from '../hooks/useDebounce';\n\ntype TimeTextFieldProps = {\n  style: TextStyle[];\n  onTimeValueReady: Function;\n  givenTime: TimeParts | null;\n  placeholderTime?: string;\n  maxHours?: string;\n  maxMinutes?: string;\n};\n\nexport default function TimeTextField({\n  givenTime,\n  onTimeValueReady,\n  style,\n  placeholderTime,\n  maxHours,\n  maxMinutes,\n}: TimeTextFieldProps): JSX.Element {\n  const [time, setTime] = useState<string>('');\n  const {\n    state: debouncedTime,\n    setDebouncedState: setDebouncedTime,\n    debounce,\n  } = useDebounce(time, 250);\n\n  useEffect(() => {\n    if (!givenTime) return;\n    setTime(givenTime.time);\n  }, [givenTime, setTime]);\n\n  useEffect((): void => {\n    onTimeValueReady(\n      TimeInputHelper.validate(debouncedTime, maxHours, maxMinutes),\n      debouncedTime\n    );\n  }, [debouncedTime, maxHours, maxMinutes, onTimeValueReady]);\n\n  useEffect((): (() => void) => {\n    setDebouncedTime(time);\n\n    return () => {\n      debounce.cancel();\n    };\n  }, [debounce, time, setDebouncedTime]);\n\n  return (\n    <TextInput\n      keyboardType=\"number-pad\"\n      maxLength={5}\n      onChangeText={(text: string) => setTime(TimeInputHelper.mask(text))}\n      placeholder={placeholderTime ?? '08:00'}\n      value={time}\n      style={style}\n    />\n  );\n}\n"]}